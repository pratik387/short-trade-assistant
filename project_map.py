"""
This file maps the roles, tags, and usage of each module in the assistant project.
Auto-generated for better understanding and cross-module reuse.
"""

PROJECT_MAP = {
    "main.py": { "role": "TBD", "used_by": [], "tags": [] },
    "project_map.py": { "role": "TBD", "used_by": [], "tags": [] },
    "assets/nse_holidays.json": { "role": "TBD", "used_by": [], "tags": [] },
    "assets/indexes/nifty_100.json": { "role": "TBD", "used_by": [], "tags": [] },
    "assets/indexes/nifty_200.json": { "role": "TBD", "used_by": [], "tags": [] },
    "assets/indexes/nifty_50.json": { "role": "TBD", "used_by": [], "tags": [] },
    "assets/indexes/nifty_500.json": { "role": "TBD", "used_by": [], "tags": [] },
    "assets/indexes/nse_all.json": { "role": "TBD", "used_by": [], "tags": [] },
    "brokers/base_broker.py": { "role": "TBD", "used_by": [], "tags": [] },
    "brokers/data/indexes.py": { "role": "TBD", "used_by": [], "tags": [] },
    "brokers/kite/kite_broker.py": { "role": "TBD", "used_by": [], "tags": [] },
    "brokers/kite/kite_client.py": { "role": "TBD", "used_by": [], "tags": [] },
    "brokers/mock/mock_broker.py": { "role": "TBD", "used_by": [], "tags": [] },
    "config/env_setup.py": { "role": "TBD", "used_by": [], "tags": [] },
    "config/filters_config.json": { "role": "TBD", "used_by": [], "tags": [] },
    "config/filters_setup.py": { "role": "TBD", "used_by": [], "tags": [] },
    "db/db/tinydb/tables/portfolio_mock.json": { "role": "TBD", "used_by": [], "tags": [] },
    "db/tinydb/client.py": { "role": "TBD", "used_by": [], "tags": [] },
    "db/tinydb/tables/portfolio.json": { "role": "TBD", "used_by": [], "tags": [] },
    "exceptions/exceptions.py": { "role": "TBD", "used_by": [], "tags": [] },
    "jobs/refresh_holidays.py": { "role": "TBD", "used_by": [], "tags": [] },
    "jobs/refresh_instrument_cache.py": { "role": "TBD", "used_by": [], "tags": [] },
    "routes/cache_router.py": { "role": "TBD", "used_by": [], "tags": [] },
    "routes/kite_auth_router.py": { "role": "TBD", "used_by": [], "tags": [] },
    "routes/notification_router.py": { "role": "TBD", "used_by": [], "tags": [] },
    "routes/pnl_router.py": { "role": "TBD", "used_by": [], "tags": [] },
    "routes/portfolio_router.py": { "role": "TBD", "used_by": [], "tags": [] },
    "routes/suggestion_router.py": { "role": "TBD", "used_by": [], "tags": [] },
    "schedulers/scheduler.py": { "role": "TBD", "used_by": [], "tags": [] },
    "schedulers/tick_listener.py": { "role": "TBD", "used_by": [], "tags": [] },
    "services/entry_service.py": { "role": "TBD", "used_by": [], "tags": [] },
    "services/exit_job_runner.py": { "role": "TBD", "used_by": [], "tags": [] },
    "services/exit_service.py": { "role": "TBD", "used_by": [], "tags": [] },
    "services/suggestion_logic.py": { "role": "TBD", "used_by": [], "tags": [] },
    "services/technical_analysis.py": { "role": "TBD", "used_by": [], "tags": [] },
    "services/filters/adx_filter.py": { "role": "TBD", "used_by": [], "tags": [] },
    "services/filters/atr_filter.py": { "role": "TBD", "used_by": [], "tags": [] },
    "services/filters/bollinger_band_filter.py": { "role": "TBD", "used_by": [], "tags": [] },
    "services/filters/candle_pattern_filter.py": { "role": "TBD", "used_by": [], "tags": [] },
    "services/filters/exit_adx_macd_filter.py": { "role": "TBD", "used_by": [], "tags": [] },
    "services/filters/exit_override_filter.py": { "role": "TBD", "used_by": [], "tags": [] },
    "services/filters/fibonacci_filter.py": { "role": "TBD", "used_by": [], "tags": [] },
    "services/filters/macd_filter.py": { "role": "TBD", "used_by": [], "tags": [] },
    "services/filters/obv_filter.py": { "role": "TBD", "used_by": [], "tags": [] },
    "services/filters/rsi_filter.py": { "role": "TBD", "used_by": [], "tags": [] },
    "services/filters/stochastic_filter.py": { "role": "TBD", "used_by": [], "tags": [] },
    "services/notification/email_alert.py": { "role": "TBD", "used_by": [], "tags": [] },
    "services/notification/sms_service.py": { "role": "TBD", "used_by": [], "tags": [] },
    "trading/audit_logger.py": { "role": "TBD", "used_by": [], "tags": [] },
    "trading/trade_analyzer.py": { "role": "TBD", "used_by": [], "tags": [] },
    "trading/trade_executor.py": { "role": "TBD", "used_by": [], "tags": [] },
    "util/portfolio_schema.py": { "role": "TBD", "used_by": [], "tags": [] },
    "util/util.py": { "role": "TBD", "used_by": [], "tags": [] },
    "kite_broker.py": "Broker interface implementation for Kite API",
    "kite_client.py": "Kite client initializer and session manager",
    "mock_broker.py": "Mock broker for paper/backtesting purposes",
    "base_broker.py": "Base broker interface definition",
    "env_setup.py": "Environment loader for backend settings",
    "filters_setup.py": "Registers and configures available filter modules",
    "client.py": "TinyDB client accessor",
    "exceptions.py": "Custom exception classes for backend services",
    "refresh_holidays.py": "Scheduler utility for updating holiday data",
    "indexes.py": "Index symbol utilities for watchlist",
    "main.py": "FastAPI app entrypoint with route mounting and startup hooks",
    "candle_pattern_filter.py": "Detects bullish candlestick patterns like hammer, engulfing etc.",
    "exit_adx_filter.py": "Exit rule based on ADX strength and trend direction",
    "exit_macd_filter.py": "Exit rule based on MACD signal crossovers",
    "exit_rsi_filter.py": "Exit logic based on RSI drops from overbought zone",
    "exit_bb_filter.py": "Exit logic using Bollinger Band breakout or squeeze",
    "exit_obv_filter.py": "Exit signal based on On-Balance Volume (OBV) divergence",
    "exit_fibonacci_filter.py": "Checks exit conditions around Fibonacci retracement zones",
    "exit_atr_squeeze_filter.py": "Detects low volatility ATR squeeze for early exit trigger",
    "email_alert.py": "Sends email alerts for exit notifications",
    "sms_service.py": "Placeholder for SMS-based alerting service",
    "audit_logger.py": "Logs detailed trade execution and system actions",
    "trade_executor.py": "Executes buy/sell actions through broker interface",
    "trade_analyzer.py": "Analyzes trade performance and outcome post-exit",
    "portfolio_schema.py": "Pydantic model for validating tracked portfolio objects",
    "util.py": "Helper utilities like date handling, price rounding etc.",
    "obv_filter.py": "Calculates On-Balance Volume (OBV) for volume trend",
    "macd_filter.py": "MACD and signal line calculation",
    "rsi_filter.py": "Relative Strength Index (RSI) indicator",
    "stochastic_filter.py": "Stochastic oscillator (%K) filter for momentum reversal",
    "fibonacci_filter.py": "Fibonacci support/resistance zone detector",
    "exit_time_decay_filter.py": "Time-based filter to exit trades held beyond a duration threshold",
    "exit_override_filter.py": "Override mechanism to force exit decisions irrespective of filters",
}